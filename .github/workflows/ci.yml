name: CI
run-name: CI Test ${{ github.repository }} at ${{ github.event.number }} (${{ github.sha }})
on:
  workflow_call:
    inputs:
      spack-manifest-path:
        required: true
        type: string
        description: |
          A file path in the caller model component repository that contains the spack manifest template to install.
          For example: .github/build/manifests/template/access-om2.spack.yaml.j2.
      spack-manifest-data-path:
        required: false
        type: string
        description: |
          An optional file path in the caller model component repository that contains data to fill in the spack manifest jinja template.
          This doesn't include {{ pr }}, which is filled in automatically.
          For example: .github/build/manifests/data/access-om2.spack.yaml.j2.json.
      spack-compiler-manifest-path:
        required: false
        type: string
        description: |
          A file path in the caller model component repository that contains the spack manifest to install local compilers not in the upstream.
          For example: .github/build/manifests/compilers.spack.yaml.
      ref:
        required: false
        type: string
        default: ${{ github.sha }}
        description: |
          The branch, tag, or commit SHA of the caller model component repository.
          For example: main, 2025.03.0, 7ey2uy2.
      spack-config-ref:
        required: false
        type: string
        default: main
        description: |
          The branch, tag, or commit SHA of the access-nri/spack-config repository to use.
          For example: main, 2025.03.0, 7ey2uy2.
      spack-packages-ref:
        required: false
        type: string
        default: main
        description: |
          The branch, tag, or commit SHA of the access-nri/spack-packages repository to use.
          For example: main, 2025.03.0, 7ey2uy2.
      spack-ref:
        required: false
        type: string
        default: main
        description: |
          The branch, tag, or commit SHA of the access-nri/spack repository to use.
          For example: develop, releases/0.22, 7ey2uy2.
      pytest-test-markers:
        required: false
        type: string
        description: |
          A string of pytest markers to use to filter tests in the caller model component repository's .github/build/tests directory.
          For example: "not slow and not mpi".
      allow-ssh-into-spack-install:
        required: false
        type: boolean
        default: false
        description: |
          Enable the actor of the workflow to SSH into the container where the spack packages have been installed.
          This is useful for gathering post-install information before the container is destroyed.
          This will also make the workflow wait until the actor SSHs into the container, or it times out, before continuing.
    outputs:
      spec-concretization-graph:
        value: ${{jobs.spack-install-and-test.outputs.spec-concretization-graph }}
        description: |
          A visual representation of the dependencies and constraints of the spack manifest file installed.
      spack-sha:
        value: ${{ jobs.spack-install-and-test.outputs.spack-sha }}
        description: |
          The SHA of the spack repository checked out.
      spack-config-sha:
        value: ${{ jobs.spack-install-and-test.outputs.spack-config-sha }}
        description: |
          The SHA of the spack-config repository checked out.
      spack-packages-sha:
        value: ${{ jobs.spack-install-and-test.outputs.spack-packages-sha }}
        description: |
          The SHA of the spack-packages repository checked out.
      sha:
        value: ${{ jobs.spack-install-and-test.outputs.sha }}
        description: |
          The SHA of the caller model component repository checked out.
      spack-files-artifact-url:
        value: ${{ jobs.spack-install-and-test.outputs.spack-files-artifact-url }}
        description: |
          The URL of the spack manifest and lock files artifact.
      # test-artifact-url:
      #   value: ${{}}
      #   description: |
      #     The URL of the pytest result artifact.
jobs:
  spack-install-and-test:
    name: Install and Test
    runs-on:
      group: test-build-ci # FIXME: This will be the group of self-hosted runners for build-ci
    container:
      image: ghcr.io/access-nri/build-ci-runner:rocky
      volumes:
        - upstream:/opt/upstream:ro  # FIXME: Validate connection via container -> runner -> upstream pod
    outputs:
      spec-concretization-graph: ${{ steps.install.outputs.spec }}
      spack-sha: ${{ steps.spack-update.outputs.sha }}
      spack-config-sha: ${{ steps.spack-config-update.outputs.sha }}
      spack-packages-sha: ${{ steps.spack-packages-update.outputs.sha }}
      sha: ${{ steps.checkout.outputs.commit }}
      spack-files-artifact-url: ${{ steps.upload.outputs.artifact-url }}
      # test-artifact-url: ${{ steps.test.outputs.artifact-url }}
    steps:
      - name: Export environment variables into GitHub Actions format
        # Environment variables inside containers are not accessible in the `env` context,
        # a context which would be used in future conditional steps.
        # This step exports important container environment variables as outputs.
        # And yes, this loop echoes name-of-var=value-of-var!
        id: env
        run: |
          for var in SPACK_ROOT SPACK_VERSION SPACK_CONFIG_REPO_VERSION SPACK_PACKAGES_REPO_VERSION; do
            echo "$var=${!var}" >> $GITHUB_OUTPUT
          done

      - name: Update spack-package version
        if: steps.env.outputs.SPACK_PACKAGES_REPO_VERSION != inputs.spack-packages-ref
        id: spack-packages-update
        uses: ./.github/actions/git-checkout-updated-ref
        with:
          repository-path: ${{ steps.env.outputs.SPACK_ROOT }}/../spack-packages
          ref: ${{ inputs.spack-packages-ref }}

      - name: Update spack-config version
        if: steps.env.outputs.SPACK_CONFIG_REPO_VERSION != inputs.spack-config-ref
        id: spack-config-update
        uses: ./.github/actions/git-checkout-updated-ref
        with:
          repository-path: ${{ steps.env.outputs.SPACK_ROOT }}/../spack-config
          ref: ${{ inputs.spack-config-ref }}

      - name: Update spack version
        if: steps.env.outputs.SPACK_VERSION != inputs.spack-ref
        id: spack-update
        uses: ./.github/actions/git-checkout-updated-ref
        with:
          repository-path: ${{ steps.env.outputs.SPACK_ROOT }}
          ref: ${{ inputs.spack-ref }}

      - name: Relink spack-config to spack
        if: steps.spack-config-update.conclusion == 'success' || steps.spack-update.conclusion == 'success'
        run: ln --symbolic --relative --verbose --force ${SPACK_CONFIG_DIR}/* ${SPACK_ROOT}/etc/spack/

      - name: Spack - Enable
        run: . $SPACK_CONFIG_DIR/ci-spack-enable.bash

      - name: Manifest - Checkout ${{ github.repository }}
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Manifest - Install Compilers Locally
        # Some compilers may not be available upstream, so we install them locally in a separate spack.yaml
        if: inputs.spack-compiler-manifest-path != ''
        run: |
          spack env activate compilers --create --prompt --envfile ${{ inputs.spack-compiler-manifest-path }}
          spack --debug install --fail-fast
          spack env deactivate
          yq '.spack.specs[]' ${{ inputs.spack-compiler-manifest-path }} | while read compiler; do
            spack load $compiler
            spack compiler find
          done
          spack compiler list

      - name: Manifest - Pip install jinja-cli for templating
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Manifest - Replace jinja template variables
        # This means that the caller manifest files can remain unchanged, but still vary based on the {{ pr }}
        # Additional data can be provided to fill in the jinja template through the `spack-manifest-data-path` input
        id: jinja-templated
        run: |
          templated_manifest_path=$(dirname ${{ inputs.spack-manifest-path }})/$(basename ${{ inputs.spack-manifest-path }} .j2)
          jinja \
            --define pr ${{ inputs.ref }} \
            ${{ inputs.spack-manifest-data-path != '' && format('--data {0}', inputs.spack-manifest-data-path) || '' }} \
            ${{ inputs.spack-manifest-path}} \
            > $templated_manifest_path

          echo "spack-manifest-path=$templated_manifest_path" >> $GITHUB_OUTPUT

      - name: Manifest - Install
        id: install
        run: |
          spack env activate --create --prompt --envfile ${{ steps.jinja-templated.outputs.spack-manifest-path }}

          echo "spec<<EOF" >> $GITHUB_OUTPUT
          echo "$(spack spec)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          spack --debug install --fail-fast --fresh

      - name: Manifest - Upload
        id: upload
        # Upload spack manifest and lock files
        uses: actions/upload-artifact@v4
        with:
          name: spack-files-${{ job.container.id }}
          path: ${{ steps.env.outputs.SPACK_ROOT }}/environments/default/spack.*
          if-no-files-found: error

      - name: Setup tmate session
        if: inputs.allow-ssh-into-spack-install == 'true'
        uses: mxschmitt/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48  # v3.19
        with:
          # sudo is not accessible in this container
          sudo: false
          # allow future steps to run without awaiting tmate session close
          detached: true
          # Only allow actor to access the tmate session
          limit-access-to-actor: true

      # TODO: Add pytest infrastructure
      # - name: Run pytests
      #   id: test
      #   run: |
      #     python -m pytest -v -m "${{ inputs.pytest-test-markers }}" --junitxml=pytest.xml
      #     echo "pytest=$(cat pytest.xml)" >> $GITHUB_OUTPUT
